

class BuiltInTopicKey: 
	def get_value(self): ...


class ParticipantBuiltinTopicData: 
	def get_key(self): ...
	def get_user_data(self): ...


class TopicBuiltinTopicData: 
	def get_key(self): ...
	def get_name(self): ...
	def get_type_name(self): ...
	def get_durability(self): ...
	def get_deadline(self): ...
	def get_latency_budget(self): ...
	def get_liveliness(self): ...
	def get_reliability(self): ...
	def get_transport_priority(self): ...
	def get_lifespan(self): ...
	def get_destination_order(self): ...
	def get_history(self): ...
	def get_resource_limits(self): ...
	def get_ownership(self): ...
	def get_topic_data(self): ...


class PublicationBuiltinTopicData: 
	def get_key(self): ...
	def participant_key(self): ...
	def topic_name(self): ...
	def get_type_name(self): ...
	def get_durability(self): ...
	def get_deadline(self): ...
	def get_latency_budget(self): ...
	def get_liveliness(self): ...
	def get_reliability(self): ...
	def get_lifespan(self): ...
	def get_user_data(self): ...
	def get_ownership(self): ...
	def get_destination_order(self): ...
	def get_presentation(self): ...
	def get_partition(self): ...
	def get_topic_data(self): ...
	def get_group_data(self): ...


class SubscriptionBuiltinTopicData: 
	def get_key(self): ...
	def participant_key(self): ...
	def topic_name(self): ...
	def get_type_name(self): ...
	def get_durability(self): ...
	def get_deadline(self): ...
	def get_latency_budget(self): ...
	def get_liveliness(self): ...
	def get_reliability(self): ...
	def get_ownership(self): ...
	def get_destination_order(self): ...
	def get_user_data(self): ...
	def get_time_based_filter(self): ...
	def get_presentation(self): ...
	def get_partition(self): ...
	def get_topic_data(self): ...
	def get_group_data(self): ...


class DomainParticipant: 
	def as_ref(self): ...
	def create_publisher(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PublisherQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def delete_publisher(self, a_publisher: Publisher): ...
	def create_subscriber(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SubscriberQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def delete_subscriber(self, a_subscriber: Subscriber): ...
	def create_topic(self, topic_name: Path { leading_colon: None, segments: [PathSegment { ident: Ident(String), arguments: PathArguments::None }] }, type_: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(TopicQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def delete_topic(self, a_topic: Topic): ...
	def lookup_topicdescription(self, topic_name: Path { leading_colon: None, segments: [PathSegment { ident: Ident(String), arguments: PathArguments::None }] }): ...
	def get_builtin_subscriber(self): ...
	def ignore_participant(self, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def ignore_topic(self, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def ignore_publication(self, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def ignore_subscription(self, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def get_domain_id(self): ...
	def delete_contained_entities(self): ...
	def assert_liveliness(self): ...
	def set_default_publisher_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PublisherQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_default_publisher_qos(self): ...
	def set_default_subscriber_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SubscriberQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_default_subscriber_qos(self): ...
	def set_default_topic_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(TopicQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_default_topic_qos(self): ...
	def get_discovered_participants(self): ...
	def get_discovered_participant_data(self, participant_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def get_discovered_topics(self): ...
	def get_discovered_topic_data(self, topic_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def contains_entity(self, a_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def get_current_time(self): ...
	def set_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DomainParticipantQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_qos(self): ...
	def set_listener(self, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_statuscondition(self): ...
	def get_status_changes(self): ...
	def enable(self): ...
	def get_instance_handle(self): ...


class DomainParticipantFactory: 
	def get_instance(): ...
	def create_participant(self, domain_id: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DomainId), arguments: PathArguments::None }] }, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DomainParticipantQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def delete_participant(self, a_participant: DomainParticipant): ...
	def lookup_participant(self, domain_id: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DomainId), arguments: PathArguments::None }] }): ...
	def set_default_participant_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DomainParticipantQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_default_participant_qos(self): ...
	def set_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DomainParticipantFactoryQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_qos(self): ...


class StatusCondition: 
	def get_enabled_statuses(self): ...
	def set_enabled_statuses(self, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_trigger_value(self): ...


class InstanceHandle: 
	pass


class DomainParticipantFactoryQos: 
	def new(, entity_factory: Path { leading_colon: None, segments: [PathSegment { ident: Ident(EntityFactoryQosPolicy), arguments: PathArguments::None }] }): ...
	def get_entity_factory(self): ...


class DomainParticipantQos: 
	def new(, user_data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(UserDataQosPolicy), arguments: PathArguments::None }] }, entity_factory: Path { leading_colon: None, segments: [PathSegment { ident: Ident(EntityFactoryQosPolicy), arguments: PathArguments::None }] }): ...
	def get_user_data(self): ...
	def get_entity_factory(self): ...


class PublisherQos: 
	def new(, presentation: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PresentationQosPolicy), arguments: PathArguments::None }] }, partition: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PartitionQosPolicy), arguments: PathArguments::None }] }, group_data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(GroupDataQosPolicy), arguments: PathArguments::None }] }, entity_factory: Path { leading_colon: None, segments: [PathSegment { ident: Ident(EntityFactoryQosPolicy), arguments: PathArguments::None }] }): ...
	def get_presentation(self): ...
	def set_presentation(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PresentationQosPolicy), arguments: PathArguments::None }] }): ...
	def get_partition(self): ...
	def set_partition(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PartitionQosPolicy), arguments: PathArguments::None }] }): ...
	def get_group_data(self): ...
	def set_group_data(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(GroupDataQosPolicy), arguments: PathArguments::None }] }): ...
	def get_entity_factory(self): ...
	def set_entity_factory(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(EntityFactoryQosPolicy), arguments: PathArguments::None }] }): ...


class SubscriberQos: 
	def new(, presentation: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PresentationQosPolicy), arguments: PathArguments::None }] }, partition: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PartitionQosPolicy), arguments: PathArguments::None }] }, group_data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(GroupDataQosPolicy), arguments: PathArguments::None }] }, entity_factory: Path { leading_colon: None, segments: [PathSegment { ident: Ident(EntityFactoryQosPolicy), arguments: PathArguments::None }] }): ...


class TopicQos: 
	def new(, topic_data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(TopicDataQosPolicy), arguments: PathArguments::None }] }, durability: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurabilityQosPolicy), arguments: PathArguments::None }] }, deadline: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DeadlineQosPolicy), arguments: PathArguments::None }] }, latency_budget: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LatencyBudgetQosPolicy), arguments: PathArguments::None }] }, liveliness: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LivelinessQosPolicy), arguments: PathArguments::None }] }, reliability: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ReliabilityQosPolicy), arguments: PathArguments::None }] }, destination_order: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DestinationOrderQosPolicy), arguments: PathArguments::None }] }, history: Path { leading_colon: None, segments: [PathSegment { ident: Ident(HistoryQosPolicy), arguments: PathArguments::None }] }, resource_limits: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ResourceLimitsQosPolicy), arguments: PathArguments::None }] }, transport_priority: Path { leading_colon: None, segments: [PathSegment { ident: Ident(TransportPriorityQosPolicy), arguments: PathArguments::None }] }, lifespan: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LifespanQosPolicy), arguments: PathArguments::None }] }, ownership: Path { leading_colon: None, segments: [PathSegment { ident: Ident(OwnershipQosPolicy), arguments: PathArguments::None }] }): ...
	def get_topic_data(self): ...
	def get_durability(self): ...
	def get_deadline(self): ...
	def get_latency_budget(self): ...
	def get_liveliness(self): ...
	def get_reliability(self): ...
	def get_destination_order(self): ...
	def get_history(self): ...
	def get_resource_limits(self): ...
	def get_transport_priority(self): ...
	def get_lifespan(self): ...
	def get_ownership(self): ...


class DataWriterQos: 
	def new(, durability: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurabilityQosPolicy), arguments: PathArguments::None }] }, deadline: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DeadlineQosPolicy), arguments: PathArguments::None }] }, latency_budget: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LatencyBudgetQosPolicy), arguments: PathArguments::None }] }, liveliness: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LivelinessQosPolicy), arguments: PathArguments::None }] }, reliability: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ReliabilityQosPolicy), arguments: PathArguments::None }] }, destination_order: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DestinationOrderQosPolicy), arguments: PathArguments::None }] }, history: Path { leading_colon: None, segments: [PathSegment { ident: Ident(HistoryQosPolicy), arguments: PathArguments::None }] }, resource_limits: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ResourceLimitsQosPolicy), arguments: PathArguments::None }] }, transport_priority: Path { leading_colon: None, segments: [PathSegment { ident: Ident(TransportPriorityQosPolicy), arguments: PathArguments::None }] }, lifespan: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LifespanQosPolicy), arguments: PathArguments::None }] }, user_data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(UserDataQosPolicy), arguments: PathArguments::None }] }, ownership: Path { leading_colon: None, segments: [PathSegment { ident: Ident(OwnershipQosPolicy), arguments: PathArguments::None }] }, writer_data_lifecycle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(WriterDataLifecycleQosPolicy), arguments: PathArguments::None }] }): ...
	def get_durability(self): ...
	def get_deadline(self): ...
	def get_latency_budget(self): ...
	def get_liveliness(self): ...
	def get_reliability(self): ...
	def get_destination_order(self): ...
	def get_history(self): ...
	def get_resource_limits(self): ...
	def get_transport_priority(self): ...
	def get_lifespan(self): ...
	def get_user_data(self): ...
	def get_ownership(self): ...
	def get_writer_data_lifecycle(self): ...


class DataReaderQos: 
	def new(, durability: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurabilityQosPolicy), arguments: PathArguments::None }] }, deadline: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DeadlineQosPolicy), arguments: PathArguments::None }] }, latency_budget: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LatencyBudgetQosPolicy), arguments: PathArguments::None }] }, liveliness: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LivelinessQosPolicy), arguments: PathArguments::None }] }, reliability: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ReliabilityQosPolicy), arguments: PathArguments::None }] }, destination_order: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DestinationOrderQosPolicy), arguments: PathArguments::None }] }, history: Path { leading_colon: None, segments: [PathSegment { ident: Ident(HistoryQosPolicy), arguments: PathArguments::None }] }, resource_limits: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ResourceLimitsQosPolicy), arguments: PathArguments::None }] }, user_data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(UserDataQosPolicy), arguments: PathArguments::None }] }, ownership: Path { leading_colon: None, segments: [PathSegment { ident: Ident(OwnershipQosPolicy), arguments: PathArguments::None }] }, time_based_filter: Path { leading_colon: None, segments: [PathSegment { ident: Ident(TimeBasedFilterQosPolicy), arguments: PathArguments::None }] }, reader_data_lifecycle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ReaderDataLifecycleQosPolicy), arguments: PathArguments::None }] }): ...
	def get_durability(self): ...
	def get_deadline(self): ...
	def get_latency_budget(self): ...
	def get_liveliness(self): ...
	def get_reliability(self): ...
	def get_destination_order(self): ...
	def get_history(self): ...
	def get_resource_limits(self): ...
	def get_user_data(self): ...
	def get_ownership(self): ...
	def get_time_based_filter(self): ...
	def get_reader_data_lifecycle(self): ...


class UserDataQosPolicy: 
	def new(, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u8), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_value(self): ...
	def set_value(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u8), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...


class EntityFactoryQosPolicy: 
	def new(, autoenable_created_entities: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }): ...
	def get_autoenable_created_entities(self): ...
	def set_autoenable_created_entities(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }): ...


class TopicDataQosPolicy: 
	def new(, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u8), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_value(self): ...
	def set_value(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u8), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...


class DurabilityQosPolicy: 
	def new(, kind: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurabilityQosPolicyKind), arguments: PathArguments::None }] }): ...
	def get_kind(self): ...
	def set_kind(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurabilityQosPolicyKind), arguments: PathArguments::None }] }): ...


class DeadlineQosPolicy: 
	def new(, period: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_period(self): ...
	def set_period(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...


class LatencyBudgetQosPolicy: 
	def new(, duration: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_duration(self): ...
	def set_duration(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...


class LivelinessQosPolicy: 
	def new(, kind: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LivelinessQosPolicyKind), arguments: PathArguments::None }] }, lease_duration: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_kind(self): ...
	def set_kind(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(LivelinessQosPolicyKind), arguments: PathArguments::None }] }): ...
	def get_lease_duration(self): ...
	def set_lease_duration(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...


class ReliabilityQosPolicy: 
	def new(, kind: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ReliabilityQosPolicyKind), arguments: PathArguments::None }] }, max_blocking_time: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_kind(self): ...
	def set_kind(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ReliabilityQosPolicyKind), arguments: PathArguments::None }] }): ...
	def get_max_blocking_time(self): ...
	def set_max_blocking_time(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...


class DestinationOrderQosPolicy: 
	def new(, kind: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DestinationOrderQosPolicyKind), arguments: PathArguments::None }] }): ...
	def get_kind(self): ...
	def set_kind(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DestinationOrderQosPolicyKind), arguments: PathArguments::None }] }): ...


class HistoryQosPolicy: 
	def new(, kind: Path { leading_colon: None, segments: [PathSegment { ident: Ident(HistoryQosPolicyKind), arguments: PathArguments::None }] }): ...
	def get_kind(self): ...
	def set_kind(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(HistoryQosPolicyKind), arguments: PathArguments::None }] }): ...


class ResourceLimitsQosPolicy: 
	def new(, max_samples: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Length), arguments: PathArguments::None }] }, max_instances: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Length), arguments: PathArguments::None }] }, max_samples_per_instance: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Length), arguments: PathArguments::None }] }): ...
	def get_max_samples(self): ...
	def set_max_samples(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Length), arguments: PathArguments::None }] }): ...
	def get_max_instances(self): ...
	def set_max_instances(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Length), arguments: PathArguments::None }] }): ...
	def get_max_samples_per_instance(self): ...
	def set_max_samples_per_instance(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Length), arguments: PathArguments::None }] }): ...


class TransportPriorityQosPolicy: 
	def new(, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }): ...
	def get_value(self): ...
	def set_value(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }): ...


class LifespanQosPolicy: 
	def new(, duration: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_duration(self): ...
	def set_duration(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...


class OwnershipQosPolicy: 
	def new(, kind: Path { leading_colon: None, segments: [PathSegment { ident: Ident(OwnershipQosPolicyKind), arguments: PathArguments::None }] }): ...
	def get_kind(self): ...
	def set_kind(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(OwnershipQosPolicyKind), arguments: PathArguments::None }] }): ...


class GroupDataQosPolicy: 
	def new(, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u8), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_value(self): ...
	def set_value(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u8), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...


class PartitionQosPolicy: 
	def new(, name: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(String), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_name(self): ...
	def set_name(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(String), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...


class PresentationQosPolicy: 
	def new(, access_scope: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PresentationQosPolicyAccessScopeKind), arguments: PathArguments::None }] }, coherent_access: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }, ordered_access: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }): ...
	def get_access_scope(self): ...
	def set_access_scope(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PresentationQosPolicyAccessScopeKind), arguments: PathArguments::None }] }): ...
	def get_coherent_access(self): ...
	def set_coherent_access(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }): ...
	def get_ordered_access(self): ...
	def set_ordered_access(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }): ...


class WriterDataLifecycleQosPolicy: 
	def new(, autodispose_unregistered_instances: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }): ...
	def get_autodispose_unregistered_instances(self): ...
	def set_autodispose_unregistered_instances(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(bool), arguments: PathArguments::None }] }): ...


class TimeBasedFilterQosPolicy: 
	def new(, minimum_separation: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_minimum_separation(self): ...
	def set_minimum_separation(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...


class ReaderDataLifecycleQosPolicy: 
	def new(, autopurge_nowriter_samples_delay: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }, autopurge_disposed_samples_delay: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_autopurge_nowriter_samples_delay(self): ...
	def set_autopurge_nowriter_samples_delay(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...
	def get_autopurge_disposed_samples_delay(self): ...
	def set_autopurge_disposed_samples_delay(self, value: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DurationKind), arguments: PathArguments::None }] }): ...


class InconsistentTopicStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...


class SampleLostStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...


class SampleRejectedStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...
	def get_last_reason(self): ...
	def get_last_instance_handle(self): ...


class LivelinessLostStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...


class LivelinessChangedStatus: 
	def get_alive_count(self): ...
	def get_not_alive_count(self): ...
	def get_alive_count_change(self): ...
	def get_not_alive_count_change(self): ...
	def get_last_publication_handle(self): ...


class OfferedDeadlineMissedStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...
	def get_last_instance_handle(self): ...


class RequestedDeadlineMissedStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...
	def get_last_instance_handle(self): ...


class QosPolicyCount: 
	def get_policy_id(self): ...
	def get_count(self): ...


class OfferedIncompatibleQosStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...
	def get_last_policy_id(self): ...
	def get_policies(self): ...


class RequestedIncompatibleQosStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...
	def get_last_policy_id(self): ...
	def get_policies(self): ...


class PublicationMatchedStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...
	def get_last_subscription_handle(self): ...
	def get_current_count(self): ...
	def get_current_count_change(self): ...


class SubscriptionMatchedStatus: 
	def get_total_count(self): ...
	def get_total_count_change(self): ...
	def get_last_publication_handle(self): ...
	def get_current_count(self): ...
	def get_current_count_change(self): ...


class Duration: 
	def new(, sec: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, nanosec: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u32), arguments: PathArguments::None }] }): ...
	def get_sec(self): ...
	def get_nanosec(self): ...


class Time: 
	def new(, sec: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, nanosec: Path { leading_colon: None, segments: [PathSegment { ident: Ident(u32), arguments: PathArguments::None }] }): ...
	def get_sec(self): ...
	def get_nanosec(self): ...


class WaitSet: 
	def new(): ...
	def wait(self, timeout: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Duration), arguments: PathArguments::None }] }): ...
	def attach_condition(self, cond: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Condition), arguments: PathArguments::None }] }): ...
	def detach_condition(self, cond: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Condition), arguments: PathArguments::None }] }): ...
	def get_conditions(self): ...


class DataWriter: 
	def as_ref(self): ...
	def register_instance(self, instance: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def register_instance_w_timestamp(self, instance: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, timestamp: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Time), arguments: PathArguments::None }] }): ...
	def unregister_instance(self, instance: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def unregister_instance_w_timestamp(self, instance: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, timestamp: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Time), arguments: PathArguments::None }] }): ...
	def get_key_value(self, _key_holder: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, _handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def lookup_instance(self, instance: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def write(self, data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def write_w_timestamp(self, data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, timestamp: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Time), arguments: PathArguments::None }] }): ...
	def dispose(self, data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def dispose_w_timestamp(self, data: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, timestamp: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Time), arguments: PathArguments::None }] }): ...
	def wait_for_acknowledgments(self, max_wait: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Duration), arguments: PathArguments::None }] }): ...
	def get_liveliness_lost_status(self): ...
	def get_offered_deadline_missed_status(self): ...
	def get_offered_incompatible_qos_status(self): ...
	def get_publication_matched_status(self): ...
	def get_topic(self): ...
	def get_publisher(self): ...
	def assert_liveliness(self): ...
	def get_matched_subscription_data(self, subscription_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def get_matched_subscriptions(self): ...
	def set_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DataWriterQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_qos(self): ...
	def set_listener(self, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_statuscondition(self): ...
	def get_status_changes(self): ...
	def enable(self): ...
	def get_instance_handle(self): ...


class Publisher: 
	def as_ref(self): ...
	def create_datawriter(self, a_topic: Topic, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DataWriterQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def delete_datawriter(self, a_datawriter: DataWriter): ...
	def lookup_datawriter(self, topic_name: str): ...
	def suspend_publications(self): ...
	def resume_publications(self): ...
	def begin_coherent_changes(self): ...
	def end_coherent_changes(self): ...
	def wait_for_acknowledgments(self, max_wait: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Duration), arguments: PathArguments::None }] }): ...
	def get_participant(self): ...
	def delete_contained_entities(self): ...
	def set_default_datawriter_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DataWriterQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_default_datawriter_qos(self): ...
	def set_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PublisherQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_qos(self): ...
	def set_listener(self, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_statuscondition(self): ...
	def get_status_changes(self): ...
	def enable(self): ...
	def get_instance_handle(self): ...


class DataReader: 
	def as_ref(self): ...
	def get_data_type(self): ...
	def read(self, max_samples: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, sample_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SampleStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, view_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ViewStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, instance_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def take(self, max_samples: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, sample_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SampleStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, view_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ViewStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, instance_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def read_next_sample(self): ...
	def take_next_sample(self): ...
	def read_instance(self, max_samples: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, a_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }, sample_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SampleStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, view_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ViewStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, instance_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def take_instance(self, max_samples: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, a_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }, sample_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SampleStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, view_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ViewStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, instance_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def read_next_instance(self, max_samples: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, previous_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, sample_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SampleStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, view_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ViewStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, instance_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def take_next_instance(self, max_samples: Path { leading_colon: None, segments: [PathSegment { ident: Ident(i32), arguments: PathArguments::None }] }, previous_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, sample_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SampleStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, view_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(ViewStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, instance_states: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceStateKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_key_value(self, _key_holder: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Bound), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Lifetime(Lifetime { apostrophe: Span, ident: Ident(_) }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, _handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def lookup_instance(self, _instance: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Bound), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Lifetime(Lifetime { apostrophe: Span, ident: Ident(_) }), Comma, GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_liveliness_changed_status(self): ...
	def get_requested_deadline_missed_status(self): ...
	def get_requested_incompatible_qos_status(self): ...
	def get_sample_lost_status(self): ...
	def get_sample_rejected_status(self): ...
	def get_subscription_matched_status(self): ...
	def get_topicdescription(self): ...
	def get_subscriber(self): ...
	def wait_for_historical_data(self, max_wait: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Duration), arguments: PathArguments::None }] }): ...
	def get_matched_publication_data(self, publication_handle: Path { leading_colon: None, segments: [PathSegment { ident: Ident(InstanceHandle), arguments: PathArguments::None }] }): ...
	def get_matched_publications(self): ...
	def set_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DataReaderQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_qos(self): ...
	def set_listener(self, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_statuscondition(self): ...
	def get_status_changes(self): ...
	def enable(self): ...
	def get_instance_handle(self): ...


class Sample: 
	def get_data(self): ...
	def get_sample_info(self): ...


class SampleInfo: 
	def get_sample_state(self): ...
	def get_view_state(self): ...
	def get_instance_state(self): ...
	def get_disposed_generation_count(self): ...
	def get_no_writers_generation_count(self): ...
	def get_sample_rank(self): ...
	def get_generation_rank(self): ...
	def get_absolute_generation_rank(self): ...
	def get_source_timestamp(self): ...
	def get_instance_handle(self): ...
	def get_publication_handle(self): ...
	def get_valid_data(self): ...


class Subscriber: 
	def as_ref(self): ...
	def create_datareader(self, a_topic: Topic, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DataReaderQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def delete_datareader(self, a_datareader: DataReader): ...
	def lookup_datareader(self, topic_name: str): ...
	def notify_datareaders(self): ...
	def get_participant(self): ...
	def get_sample_lost_status(self): ...
	def delete_contained_entities(self): ...
	def set_default_datareader_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(DataReaderQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_default_datareader_qos(self): ...
	def set_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(SubscriberQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_qos(self): ...
	def set_listener(self, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_statuscondition(self): ...
	def get_status_changes(self): ...
	def enable(self): ...
	def get_instance_handle(self): ...


class Topic: 
	def as_ref(self): ...
	def get_inconsistent_topic_status(self): ...
	def get_participant(self): ...
	def get_type_name(self): ...
	def get_name(self): ...
	def set_qos(self, qos: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(TopicQos), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_qos(self): ...
	def set_listener(self, a_listener: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Option), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Py), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(PyAny), arguments: PathArguments::None }] } })], gt_token: Gt } }] } })], gt_token: Gt } }] }, mask: Path { leading_colon: None, segments: [PathSegment { ident: Ident(Vec), arguments: PathArguments::AngleBracketed { colon2_token: None, lt_token: Lt, args: [GenericArgument::Type(Type::Path { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident(StatusKind), arguments: PathArguments::None }] } })], gt_token: Gt } }] }): ...
	def get_statuscondition(self): ...
	def get_status_changes(self): ...
	def enable(self): ...
	def get_instance_handle(self): ...
