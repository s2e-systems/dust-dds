version: 2.1

parameters:
  build_docker_image:
    type: boolean
    default: false
  build_android_docker_image:
    type: boolean
    default: false

orbs:
  rust: circleci/rust@1.6.2

jobs:
  hello_world_on_macos:
    macos:
      xcode: 14.2.0
    resource_class: macos.m1.medium.gen1
    steps:
    - checkout
    - rust/install
    - run:
        name: Run Hello world example
        command: |
          cargo run --example hello_world_publisher &
          pid=$!
          cargo run --example hello_world_subscriber
          wait $pid
  hello_world_on_windows:
    machine:
      image: 'windows-server-2019-vs2019:2024.05.1'
      resource_class: windows.medium
      shell: powershell.exe -ExecutionPolicy Bypass
    steps:
    - checkout
    - run:
        name: Install Rust
        command: |
          curl -o rustup.sh https://sh.rustup.rs
          bash rustup.sh -y
    - run:
        name: Run Hello world example
        command: |
          $publisher = Start-Process cargo -ArgumentList 'run --example hello_world_publisher' -PassThru
          cargo run --example hello_world_subscriber
          $publisher.WaitForExit()

  build_and_push_docker_image:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build --file .circleci/Dockerfile --tag s2esystems/dust_dds_interoperability:1.85.0 .
      - run:
          name: Push image to DockerHub
          command: |
            echo $DOCKERHUB_ACCESS_TOKEN | docker login --username $DOCKERHUB_USERNAME --password-stdin
            docker push s2esystems/dust_dds_interoperability:1.85.0
  build_and_push_android_docker_image:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Android Docker image
          command: docker build --file .circleci/android/Dockerfile --tag s2esystems/dust_dds_android:1.85.0 .
      - run:
          name: Push Android image to DockerHub
          command: |
            echo $DOCKERHUB_ACCESS_TOKEN | docker login --username $DOCKERHUB_USERNAME --password-stdin
            docker push s2esystems/dust_dds_android:1.85.0

  clippy:
    docker:
      - image: cimg/rust:1.87.0
    resource_class: large
    steps:
      - checkout
      - run: cargo --version
      - run: cargo clippy -- -D warnings
  benchmark:
    docker:
      - image: cimg/rust:1.87.0
    resource_class: large
    steps:
      - checkout
      - run: cargo bench --package dust_dds --bench benchmark -- --save-baseline branch_baseline
      - run: git checkout main
      - run: cargo bench --package dust_dds --bench benchmark -- --save-baseline main_baseline
      - run: cargo bench --bench benchmark -- --load-baseline branch_baseline --baseline main_baseline --color never | tee /tmp/output
      # Performance regression is not explicitly checked due to measurement instability issues
      - store_artifacts:
          path: ./target/criterion
  tests:
    docker:
      - image: cimg/rust:1.87.0
    resource_class: large
    steps:
      - checkout
      - run: rustup component add llvm-tools-preview
      - run: cargo --version
      - run:
          name: Run Tests
          command: |
            export RUSTFLAGS="-Cinstrument-coverage -Dwarnings"
            export LLVM_PROFILE_FILE="test-%p-%m.profraw"
            cargo test --package dust_dds --package dust_dds_derive --package dust_dds_gen
      - run:
          name: Hello world example
          command: |
            export RUSTFLAGS="-Cinstrument-coverage -Dwarnings"
            export LLVM_PROFILE_FILE="test-%p-%m.profraw"
            cargo run --example hello_world_publisher &
            pid=$!
            cargo run --example hello_world_subscriber
            wait $pid
      - run:
          name: BestEffort example
          command: |
            export RUSTFLAGS="-Cinstrument-coverage -Dwarnings"
            export LLVM_PROFILE_FILE="test-%p-%m.profraw"
            cargo run --example best_effort_subscriber &
            pid=$!
            cargo run --example best_effort_publisher
            wait $pid
      - run:
          name: Tokio runtime example
          command: |
            export RUSTFLAGS="-Cinstrument-coverage -Dwarnings"
            export LLVM_PROFILE_FILE="test-%p-%m.profraw"
            cargo run --example tokio_runtime

      - run:
          name: Gather coverage data
          command: |
            curl -L https://github.com/mozilla/grcov/releases/download/v0.8.20/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf -
            ./grcov . -s . --binary-path ./target/debug/ -t html --ignore-not-existing -o /tmp/coverage

      - store_artifacts:
          path: /tmp/coverage
  compilation_times:
    docker:
      - image: cimg/rust:1.87.0
    resource_class: large
    steps:
      - checkout
      - run: cargo build --package dust_dds --timings --tests --examples
      - store_artifacts:
          path: ./target/cargo-timings

  interoperability_tests:
    docker:
      - image: s2esystems/dust_dds_interoperability:1.85.0
    steps:
      - checkout
      - run:
          name: Build FastDDS Interoperability tests
          command: |
            cmake -S interoperability_tests/fast_dds -B build/fast_dds
            mkdir build/fast_dds/idl
            java -jar /usr/local/share/fastddsgen/java/fastddsgen.jar -d build/fast_dds/idl interoperability_tests/HelloWorld.idl
            java -jar /usr/local/share/fastddsgen/java/fastddsgen.jar -d build/fast_dds/idl interoperability_tests/DisposeData.idl
            cmake --build build/fast_dds
      - run:
          name: Build CycloneDDS Interoperability tests
          command: |
            cmake -S interoperability_tests/cyclone_dds -B build/cyclone_dds
            cmake --build build/cyclone_dds
      - run:
          name: Build dust binaries
          command: |
            cargo build --package dust_dds_interoperability
      - run:
          name: FastDDS publisher interoperability test
          command: |
            cargo run --package dust_dds_interoperability --bin dust_dds_subscriber &
            pid=$!
            build/fast_dds/FastDdsPublisher
            wait $pid
      - run:
          name: FastDDS subscriber interoperability test
          command: |
            build/fast_dds/FastDdsSubscriber &
            pid=$!
            cargo run --package dust_dds_interoperability --bin dust_dds_publisher
            wait $pid
      - run:
          name: FastDDS publisher dispose interoperability test
          command: |
            build/fast_dds/FastDdsSubscriberDispose &
            pid=$!
            cargo run --package dust_dds_interoperability --bin dust_dds_publisher_dispose
            wait $pid
      - run:
          name: FastDDS subscriber dispose interoperability test
          command: |
            cargo run --package dust_dds_interoperability --bin dust_dds_subscriber_dispose &
            pid=$!
            build/fast_dds/FastDdsPublisherDispose
            wait $pid
      - run:
          name: Cyclone publisher interoperability test
          command: |
            cargo run --package dust_dds_interoperability --bin dust_dds_subscriber &
            pid=$!
            build/cyclone_dds/CycloneDdsPublisher
            wait $pid
      - run:
          name: Cyclone subscriber interoperability test
          command: |
            build/cyclone_dds/CycloneDdsSubscriber &
            pid=$!
            cargo run --package dust_dds_interoperability --bin dust_dds_publisher
            wait $pid
      - run:
          name: Cyclone Big data publisher interoperability test
          command: |
            build/cyclone_dds/CycloneDdsBigDataSubscriber &
            pid=$!
            cargo run --package dust_dds_interoperability --bin dust_dds_big_data_publisher
            wait $pid
      - run:
          name: Cyclone Big data subscriber interoperability test
          command: |
            build/cyclone_dds/CycloneDdsBigDataPublisher &
            pid=$!
            cargo run --package dust_dds_interoperability --bin dust_dds_big_data_subscriber
            wait $pid
      - run:
          name: Cyclone publisher dispose interoperability test
          command: |
            build/cyclone_dds/CycloneDdsSubscriberDispose &
            pid=$!
            cargo run --package dust_dds_interoperability --bin dust_dds_publisher_dispose
            wait $pid
      - run:
          name: Cyclone subscriber dispose interoperability test
          command: |
            cargo run --package dust_dds_interoperability --bin dust_dds_subscriber_dispose &
            pid=$!
            build/cyclone_dds/CycloneDdsPublisherDispose
            wait $pid
      - run:
          name: Cyclone publisher nested interoperability test
          command: |
            build/cyclone_dds/CycloneDdsSubscriberNested &
            pid=$!
            cargo run --package dust_dds_interoperability --bin dust_dds_publisher_nested
            wait $pid
      - run:
          name: Cyclone subscriber nested interoperability test
          command: |
            cargo run --package dust_dds_interoperability --bin dust_dds_subscriber_nested &
            pid=$!
            build/cyclone_dds/CycloneDdsPublisherNested
            wait $pid

  multi_machine_tests:
    docker:
      - image: cimg/rust:1.87.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build executables
          command: |
            cargo build --package dust_dds_interoperability --bin multiple_subscriber_test_subscriber
            cargo build --package dust_dds_interoperability --bin multiple_subscriber_test_publisher
      - run:
          name: Run 2 subscribers with different IPs
          command: |
            # create docker volume (since direct mapping is not possible)
            docker create -v /var --name storage cimg/rust:1.87.0 /bin/true
            docker cp ./target/debug/multiple_subscriber_test_subscriber storage:/var
            docker cp ./target/debug/multiple_subscriber_test_publisher storage:/var
            docker network create --subnet 192.0.2.0/24 test-network
            docker run --detach --name subscriber_1 --volumes-from storage --network=test-network --ip=192.0.2.5 cimg/rust:1.87.0  /var/multiple_subscriber_test_subscriber
            docker run --detach --name subscriber_2 --volumes-from storage --network=test-network --ip=192.0.2.6  cimg/rust:1.87.0  /var/multiple_subscriber_test_subscriber
            docker run --rm --name publisher --volumes-from storage --network=test-network --ip=192.0.2.7  cimg/rust:1.87.0  /var/multiple_subscriber_test_publisher
            docker logs subscriber_1 | tee subscriber_1.out
            docker logs subscriber_2 | tee subscriber_2.out
            echo "Received: id: 8, msg: Hello world" | cmp subscriber_1.out
            cmp subscriber_1.out subscriber_2.out

  shapes_demo_build:
    docker:
      - image: cimg/rust:1.87.0
    steps:
      - checkout
      - run:
          name: Build
          command: cargo build --package dust_dds_shapes_demo

  telescope_build:
    docker:
      - image: cimg/rust:1.87.0
    steps:
      - checkout
      - run:
          name: Build
          command: cargo build --package dust_dds_telescope

  shapes_demo_android_build:
    docker:
      - image: s2esystems/dust_dds_android:1.85.0
    steps:
      - checkout
      - run:
          name: Decode_Android_key_store
          command: echo $BASE64_KEYSTORE | base64 -d | tee keystore shapes_demo/android/app/keystore.jks > /dev/null
      - run:
          name: Create_keystore_properties
          command: cd shapes_demo/android && printf 'keyAlias=%s\nkeyPassword=%s\nstoreFile=keystore.jks\nstorePassword=%s' $RELEASE_KEY_ALIAS $RELEASE_KEY_PASSWORD $RELEASE_STORE_PASSWORD > keystore.properties
      - run:
          name: Build_Android
          command: ./shapes_demo/android/gradlew --project-dir shapes_demo/android bundleRelease
      - store_artifacts:
          path: shapes_demo/android/app/build/outputs/bundle/release
workflows:
  build_and_run_tests:
    jobs:
      - tests
      - hello_world_on_macos
      - hello_world_on_windows
      - benchmark
      - compilation_times
      - clippy
      - multi_machine_tests
      - shapes_demo_build
      - telescope_build

  build_docker_image_and_run_interoperability_tests:
    when: << pipeline.parameters.build_docker_image >>
    jobs:
      - build_and_push_docker_image
      - interoperability_tests:
          requires:
            - build_and_push_docker_image

  run_interoperability_tests:
    when:
      not: << pipeline.parameters.build_docker_image >>
    jobs:
      - interoperability_tests

  build_docker_image_and_android:
    when: << pipeline.parameters.build_android_docker_image >>
    jobs:
      - build_and_push_android_docker_image
      - shapes_demo_android_build:
          requires:
            - build_and_push_android_docker_image

  run_android_build:
    when:
      not: << pipeline.parameters.build_android_docker_image >>
    jobs:
      - shapes_demo_android_build
