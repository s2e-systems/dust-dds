use std::io::Read;

use crate::{
    cdr::{
        deserialize::CdrDeserialize,
        deserializer::ClassicCdrDeserializer,
        endianness::CdrEndianness,
        parameter_list_deserialize::ParameterListDeserialize,
        parameter_list_deserializer::ParameterListCdrDeserializer,
        parameter_list_serialize::ParameterListSerialize,
        parameter_list_serializer::{ParameterListCdrSerializer, ParameterListSerializer},
        serialize::CdrSerialize,
        serializer::ClassicCdrSerializer,
    },
    implementation::data_representation_builtin_endpoints::parameter_id_values::PID_SENTINEL,
    infrastructure::{
        error::{DdsError, DdsResult},
        instance::InstanceHandle,
    },
};

pub use dust_dds_derive::{
    DdsDeserialize, DdsHasKey, DdsInstanceHandle, DdsInstanceHandleFromSerializedData,
    DdsSerialize, DdsSerializeKey,
};

/// This trait indicates whether the associated type is keyed or not, i.e. if the middleware
/// should manage different instances of the type.
///
/// ## Derivable
///
/// This trait can be automatically derived. If the struct has any field marked `#[dust_dds(key)]`
/// then HAS_KEY will be set to 'true' otherwise will be set to 'false'.
pub trait DdsHasKey {
    const HAS_KEY: bool;
}

/// This trait defines how to serialize the information contained in a data structure to be published.
///
/// The information generated by the method of this trait is typically visible on the
/// `serializedData` element of the Data submessage when transmitting a published sample.
///
/// ## Derivable
///
/// This trait can be automatically derived if the struct implements either `CdrSerialize` or `ParameterListSerialize`.
/// The format to be used for serializing can be selected by applying the '#[dust_dds(format = ...)]' attribute to the container.
/// Available format options are "CDR_LE", "CDR_BE", "PL_CDR_LE" and "PL_CDR_BE".
pub trait DdsSerialize {
    fn serialize_data(&self, writer: impl std::io::Write) -> DdsResult<()>;
}

/// This trait describes how the bytes can be deserialize to construct the data structure.
///
/// This trait is typically used when reading the data from the samples from the DataReader.
/// The `'de` lifetime of this trait is the lifetime of data that may be borrowed from the input when deserializing.
///
/// ## Derivable
///
/// This trait can be automatically derived if the struct implements either `CdrSerialize` or `ParameterListSerialize`.
/// The format to be used for deserializing can be selected by applying the '#[dust_dds(format = ...)]' attribute to the container.
/// Available format options are "CDR_LE", "CDR_BE", "PL_CDR_LE" and "PL_CDR_BE".
pub trait DdsDeserialize<'de>: Sized {
    fn deserialize_data(serialized_data: &'de [u8]) -> DdsResult<Self>;
}

/// This trait describes how the key information in the data structure can be serialized to a writer.
///
/// The information created by this trait is typically visible on the `serializedData` element
/// of the Data submessage when transmitting information about a disposed or unregistered sample.
///
/// ## Derivable
///
/// This trait can be automatically derived if the key fields of the struct implement `CdrSerialize`.
/// The derive always uses the CDR_LE format for serializing the key
pub trait DdsSerializeKey {
    fn serialize_key(&self, writer: impl std::io::Write) -> DdsResult<()>;
}

/// This trait defines how the unique instance handle can be generated from a given instance of a type.
///
/// The handle generated by this trait is not visible externally but it is typically used on the
/// writer side to identify the sample which is being modified at a given moment.
///
/// ## Derivable
///
/// This trait can be automatically derived if the key fields of the struct implement `CdrSerialize`.
/// The automatic derive generates the InstanceHandle by serializing the key fields using the CDR_BE format
/// and constructing the InstanceHandle from the resulting serialized vector. Note: the [`InstanceHandle`]
/// has a size of 16 octets and uses an md5 hashing algorithm to convert any vector above that size. This
/// process is as described in the RTPS `PID_KEY_HASH` value but could be modified.
pub trait DdsInstanceHandle {
    fn get_instance_handle(&self) -> DdsResult<InstanceHandle>;
}

/// This trait defines how the unique key information can be generated from the serialized data of a type.
///
/// The key generated by this trait is not visible externally but it is typically used on the
/// reader side to identify the instance of a sample which is being updated by the received Data submessage.
///
/// ## Derivable
///
/// This trait is can be automatically derived if the type implements [`DdsDeserialize`] and [`DdsInstanceHandle`]. The automatic derive
/// sequentially calls the [`DdsDeserialize::deserialize_data`] method followed by a call to [`DdsInstanceHandle::get_instance_handle`].
pub trait DdsInstanceHandleFromSerializedData {
    fn get_handle_from_serialized_data(serialized_data: &[u8]) -> DdsResult<InstanceHandle>;
}

/// This is a convenience derive to allow the user to easily derive all the different traits needed for a type to be used for
/// communication with DustDDS. If the individual traits are manually derived then this derive should not be used.
///
/// This trait can be automatically derived. The generated trait uses by default a CdrLe
/// representation and it determines whether the type is keyed or not depending on whether
/// any field is marked `#[dust_dds(key)]` or not.
///
/// An example of a typical usage of derive is the following:
///
/// ```rust
///     use dust_dds::topic_definition::type_support::DdsType;
///
///     #[derive(DdsType)]
///     struct KeyedData {
///         #[dust_dds(key)]
///         id: u8,
///         value: u32,
///     }
/// ```
///
/// It is also possible to derive structs with a lifetime:
///
/// ```rust
///     use dust_dds::topic_definition::type_support::DdsType;
///     use std::borrow::Cow;
///
///     #[derive(DdsType)]
///     struct BorrowedData<'a> {
///         #[dust_dds(key)]
///         id: u8,
///         value: &'a [u8],
///     }
/// ```
///
pub use dust_dds_derive::DdsType;

type RepresentationIdentifier = [u8; 2];
type RepresentationOptions = [u8; 2];

const CDR_BE: RepresentationIdentifier = [0x00, 0x00];
const CDR_LE: RepresentationIdentifier = [0x00, 0x01];
const PL_CDR_BE: RepresentationIdentifier = [0x00, 0x02];
const PL_CDR_LE: RepresentationIdentifier = [0x00, 0x03];
const REPRESENTATION_OPTIONS: RepresentationOptions = [0x00, 0x00];

/// This is a helper function to serialize a type implementing [`CdrSerialize`] using the RTPS defined classic CDR representation.
pub fn serialize_rtps_classic_cdr(
    value: &impl CdrSerialize,
    mut writer: impl std::io::Write,
    endianness: CdrEndianness,
) -> DdsResult<()> {
    match endianness {
        CdrEndianness::LittleEndian => writer.write_all(&CDR_LE)?,
        CdrEndianness::BigEndian => writer.write_all(&CDR_BE)?,
    }
    writer.write_all(&REPRESENTATION_OPTIONS)?;
    let mut serializer = ClassicCdrSerializer::new(writer, endianness);
    CdrSerialize::serialize(value, &mut serializer)?;
    Ok(())
}

/// This is a helper function to serialize a type implementing [`ParameterListSerialize`] using the RTPS defined CDR Parameter List representation.
pub fn serialize_rtps_cdr_pl(
    value: &impl ParameterListSerialize,
    mut writer: impl std::io::Write,
    endianness: CdrEndianness,
) -> DdsResult<()> {
    match endianness {
        CdrEndianness::LittleEndian => writer.write_all(&PL_CDR_LE)?,
        CdrEndianness::BigEndian => writer.write_all(&PL_CDR_BE)?,
    }
    writer.write_all(&REPRESENTATION_OPTIONS)?;
    let mut serializer = ParameterListCdrSerializer::new(writer, endianness);
    ParameterListSerialize::serialize(value, &mut serializer)?;
    serializer.write(PID_SENTINEL, &())?;
    Ok(())
}

/// This is a helper function to deserialize a type implementing both [`CdrDeserialize`] and [`ParameterListDeserialize`] using either
/// the RTPS classic CDR or Parameter List representation.
/// The representation to be used is automatically determined from the representation identifier and options
pub fn deserialize_rtps<'de, T>(serialized_data: &mut &'de [u8]) -> DdsResult<T>
where
    T: CdrDeserialize<'de> + ParameterListDeserialize<'de>,
{
    let mut representation_identifier = [0u8, 0];
    serialized_data
        .read_exact(&mut representation_identifier)
        .map_err(|err| DdsError::Error(err.to_string()))?;

    let mut representation_option = [0u8, 0];
    serialized_data
        .read_exact(&mut representation_option)
        .map_err(|err| DdsError::Error(err.to_string()))?;

    let value = match representation_identifier {
        CDR_BE => {
            let mut deserializer =
                ClassicCdrDeserializer::new(serialized_data, CdrEndianness::BigEndian);
            Ok(CdrDeserialize::deserialize(&mut deserializer)?)
        }
        CDR_LE => {
            let mut deserializer =
                ClassicCdrDeserializer::new(serialized_data, CdrEndianness::LittleEndian);
            Ok(CdrDeserialize::deserialize(&mut deserializer)?)
        }
        PL_CDR_BE => {
            let mut deserializer =
                ParameterListCdrDeserializer::new(serialized_data, CdrEndianness::BigEndian);
            Ok(ParameterListDeserialize::deserialize(&mut deserializer)?)
        }
        PL_CDR_LE => {
            let mut deserializer =
                ParameterListCdrDeserializer::new(serialized_data, CdrEndianness::LittleEndian);
            Ok(ParameterListDeserialize::deserialize(&mut deserializer)?)
        }
        _ => Err(DdsError::Error(
            "Unknownn representation identifier".to_string(),
        )),
    }?;
    Ok(value)
}

/// This is a helper function to deserialize a type implementing [`CdrDeserialize`] using the RTPS classic CDR representation.
/// The representation endianness to be used is automatically determined from the representation identifier and options
pub fn deserialize_rtps_classic_cdr<'de, T>(serialized_data: &mut &'de [u8]) -> DdsResult<T>
where
    T: CdrDeserialize<'de>,
{
    let mut representation_identifier = [0u8, 0];
    serialized_data
        .read_exact(&mut representation_identifier)
        .map_err(|err| DdsError::Error(err.to_string()))?;

    let mut representation_option = [0u8, 0];
    serialized_data
        .read_exact(&mut representation_option)
        .map_err(|err| DdsError::Error(err.to_string()))?;

    let mut deserializer = match representation_identifier {
        CDR_BE => Ok(ClassicCdrDeserializer::new(
            serialized_data,
            CdrEndianness::BigEndian,
        )),
        CDR_LE => Ok(ClassicCdrDeserializer::new(
            serialized_data,
            CdrEndianness::LittleEndian,
        )),
        _ => Err(DdsError::Error(
            "Unknownn representation identifier".to_string(),
        )),
    }?;
    let value = CdrDeserialize::deserialize(&mut deserializer)?;
    Ok(value)
}

/// This is a helper function to deserialize a type implementing [`ParameterListDeserialize`] using the RTPS Parameter List representation.
/// The representation endianness to be used is automatically determined from the representation identifier and options
pub fn deserialize_rtps_cdr_pl<'de, T>(serialized_data: &mut &'de [u8]) -> DdsResult<T>
where
    T: ParameterListDeserialize<'de>,
{
    let mut representation_identifier = [0u8, 0];
    serialized_data
        .read_exact(&mut representation_identifier)
        .map_err(|err| DdsError::Error(err.to_string()))?;

    let mut representation_option = [0u8, 0];
    serialized_data
        .read_exact(&mut representation_option)
        .map_err(|err| DdsError::Error(err.to_string()))?;

    let mut deserializer = match representation_identifier {
        PL_CDR_BE => Ok(ParameterListCdrDeserializer::new(
            serialized_data,
            CdrEndianness::BigEndian,
        )),
        PL_CDR_LE => Ok(ParameterListCdrDeserializer::new(
            serialized_data,
            CdrEndianness::LittleEndian,
        )),
        _ => Err(DdsError::Error(
            "Unknownn representation identifier".to_string(),
        )),
    }?;
    let value = ParameterListDeserialize::deserialize(&mut deserializer)?;
    Ok(value)
}
